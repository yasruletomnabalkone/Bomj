const game = {
    player: {
        health: 100,
        inventory: [],
        reputation: 0,
        tugriks: 0,
        quests: {},
        is_addicted: false,
        has_hiv: false,
        is_drunk: false,
        addictionTimer: null
    },

    locations: [
        { name: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É '–ü—è—Ç—ë—Ä–æ—á–∫–∏'", description: "–í–æ–Ω—è–µ—Ç —Ç—É—Ö–ª—ã–º –±–æ—Ä—â–æ–º –∏ –Ω–∞–¥–µ–∂–¥–æ–π. –í —É–≥–ª—É —Ä–∂–∞–≤–µ–µ—Ç –¥–µ—Ç—Å–∫–∞—è –∫–æ–ª—è—Å–∫–∞.", items: ["–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'", "–¥–æ—à–∏—Ä–∞–∫", "–∫–ª—é—á –æ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–±–∏—Ç—ã–π –∫–∏—Ä–ø–∏—á"], danger_level: 2 },
        { name: "–ì–∞—Ä–∞–∂–∏ –∑–∞ –¥–æ–º–æ–º", description: "–¢–µ–º–Ω–æ, –ø–∞—Ö–Ω–µ—Ç –±–µ–Ω–∑–∏–Ω–æ–º –∏ —Å—Ç—Ä–∞—Ö–æ–º. –ó–¥–µ—Å—å –ø—Ä—è—á—É—Ç—Å—è —Å–∫–∏–Ω—Ö–µ–¥—ã.", items: ["—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'", "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'", "—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å"], danger_level: 7 },
        { name: "–ü–æ–º–æ–π–∫–∞ —É –ø–∞—Ä–∞–¥–Ω–æ–π", description: "–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ–π–∫–∞: –±–∏—Ç—ã–µ —á–∞—à–∫–∏ –∏ —à–∞–º–ø–∞–Ω—Å–∫–æ–µ.", items: ["–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏", "–±–∞–±—É—à–∫–∏–Ω —Å—É–ø", "–∫–æ–ª—å—Ü–æ —Å —Ñ–∏–∞–Ω–∏—Ç–æ–º"], danger_level: 3 },
        { name: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", description: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è —Ö–∞—Ç–∞ —Å –æ–±–æ–¥—Ä–∞–Ω–Ω—ã–º–∏ –æ–±–æ—è–º–∏ –∏ –∑–∞–ø–∞—Ö–æ–º —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞.", items: ["–≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü", "–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞", "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç"], danger_level: 10 },
        { name: "–õ–æ–º–±–∞—Ä–¥", description: "–¢—ë–º–Ω—ã–π –∑–∞–∫—É—Ç–æ–∫ —Å –º—É—Ç–Ω—ã–º —Ç–∏–ø–æ–º –∑–∞ —Å—Ç–æ–π–∫–æ–π.", items: ["—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å", "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç"], danger_level: 4 },
        { name: "–ü–æ–¥–≤–∞–ª", description: "–°—ã—Ä–æ–π –ø–æ–¥–≤–∞–ª —Å –∫—Ä—ã—Å–∞–º–∏ –∏ —à–º–æ—Ç–∫–∞–º–∏.", items: ["—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞", "–∫—Ä—ã—Å–∏–Ω—ã–π —è–¥", "10 —Ç—É–≥—Ä–∏–∫–æ–≤"], danger_level: 5 }
    ],

    riddles: [
        {
            question: "–ï—Å—Ç—å –¥–≤–∞ —Å—Ç—É–ª–∞ ‚Äî –Ω–∞ –æ–¥–Ω–æ–º –ø–∏–∫–∏ —Ç–æ—á—ë–Ω—ã–µ, –Ω–∞ –¥—Ä—É–≥–æ–º —Ö—É–∏ –¥—Ä–æ—á—ë–Ω–Ω—ã–µ, –Ω–∞ –∫–∞–∫–æ–π —Å–∞–º —Å—è–¥–µ—à—å, –Ω–∞ –∫–∞–∫–æ–π –º–∞—Ç—å –ø–æ—Å–∞–¥–∏—à—å?",
            options: [
                "–°—è–¥—É –Ω–∞ –ø–∏–∫–∏, –º–∞—Ç—å –Ω–∞ —Ö—É–∏.",
                "–°—è–¥—É –Ω–∞ —Ö—É–∏, –º–∞—Ç—å –Ω–∞ –ø–∏–∫–∏.",
                "–í–æ–∑—å–º—É –ø–∏–∫–∏, —Å—Ä–µ–∂—É —Ö—É–∏, —Å–∞–º —Å—è–¥—É –Ω–∞ —Å—Ç—É–ª –∏ –º–∞—Ç—å –Ω–∞ –∫–æ–ª–µ–Ω–∏ –ø–æ—Å–∞–∂—É.",
                "–û–±–∞ —Å—Ç—É–ª–∞ —Å–ª–æ–º–∞—é –∏ —É–π–¥—É."
            ],
            correct: 2
        }
    ],

    currentLocation: null,
    output: document.getElementById("output"),
    danyaOptions: document.getElementById("danya-options"),
    danyaActive: false,

    init() {
        this.currentLocation = this.locations[0];
        this.updateGame();
    },

    updateStatus() {
        let status = `‚ô• –ó–¥–æ—Ä–æ–≤—å–µ: ${this.player.health} | üé≠ –†–µ–ø—É—Ç–∞—Ü–∏—è: ${this.player.reputation} | üí∞ –¢—É–≥—Ä–∏–∫–∏: ${this.player.tugriks}\n`;
        status += `üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.player.inventory.length > 0 ? this.player.inventory.join(", ") : "–ø—É—Å—Ç–æ"}\n`;
        if (Object.keys(this.player.quests).length > 0) status += `üìú –ö–≤–µ—Å—Ç—ã: ${Object.keys(this.player.quests).join(", ")}\n`;
        if (this.player.is_addicted) status += "üíâ –¢—ã –∑–∞–≤–∏—Å–∏–º –æ—Ç —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞!\n";
        if (this.player.has_hiv) status += "ü©∫ –£ —Ç–µ–±—è –í–ò–ß!\n";
        if (this.player.is_drunk) status += "üç∫ –¢—ã –ø—å—è–Ω—ã–π!\n";
        document.getElementById("status").innerText = status;
    },

    updateGame() {
        let text = `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: ${this.currentLocation.name}\n${this.currentLocation.description}`;

        if (this.currentLocation.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞" && !this.player.has_hiv && Math.random() > 0.5) {
            text += "\n–û–±–¥–æ–ª–±–∞–Ω–Ω—ã–π –Ω–∞—Ä–∏–∫ –≤—Ç—ã–∫–∞–µ—Ç –≤ —Ç–µ–±—è –≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü!";
            this.startAddiction();
            this.player.has_hiv = true;
            this.player.health -= 20;
            text += "\n–¢—ã —Å—Ç–∞–ª –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞ –∏ –∑–∞—Ä–∞–∑–∏–ª—Å—è –í–ò–ß! -20 HP";
        }

        if (this.player.health <= 0) {
            if (this.player.is_addicted) {
                text += "\n–¢—ã –Ω–∞—à—ë–ª –≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü –Ω–∞ —É–ª–∏—Ü–µ, —à–∏—Ä–Ω—É–ª—Å—è –∏ —É–º–µ—Ä –æ—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–æ–≤–∏. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.";
            } else {
                text += "\n–¢—ã —Å–≥–Ω–∏–ª –≤ –ø–∏—Ç–µ—Ä—Å–∫–∏—Ö –ø–æ–º–æ–π–∫–∞—Ö. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.";
            }
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        } else if (this.player.tugriks >= 1000) {
            text += "\n–¢—ã –Ω–∞–±—Ä–∞–ª 1000 —Ç—É–≥—Ä–∏–∫–æ–≤! –°–Ω—è–ª —Ö–∞—Ç—É, –Ω–∞—à—ë–ª —Ä–∞–±–æ—Ç—É –∏ –≤—ã–±—Ä–∞–ª—Å—è –∏–∑ —ç—Ç–æ–≥–æ –¥–µ—Ä—å–º–∞. –ü–æ–±–µ–¥–∞!";
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        }

        this.output.innerText = text;
        this.updateStatus();

        if (this.player.tugriks >= 50 && Math.random() > 0.7) {
            this.tradeOpportunity();
        }
    },

    startAddiction() {
        this.player.is_addicted = true;
        if (!this.player.addictionTimer) {
            this.player.addictionTimer = setInterval(() => {
                if (!this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
                    this.player.health -= 5;
                    this.output.innerText += "\n–õ–æ–º–∫–∞ –±—å—ë—Ç... -5 HP";
                    this.updateGame();
                }
            }, 10000);
        }
    },

    miniGameGuessContainer() {
        let text = "\n–¢—Ä–∏ –±–∞–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –í –æ–¥–Ω–æ–º ‚Äî —à–º–æ—Ç–∫–∞. –£–≥–∞–¥–∞–π (1, 2, 3): ";
        this.output.innerText += text;
        let choice = prompt("–í—ã–±–µ—Ä–∏ –±–∞–∫ (1, 2 –∏–ª–∏ 3):");
        let winningContainer = Math.floor(Math.random() * 3) + 1;

        if (parseInt(choice) === winningContainer) {
            let foundItem = this.currentLocation.items[Math.floor(Math.random() * this.currentLocation.items.length)];
            if (foundItem === "10 —Ç—É–≥—Ä–∏–∫–æ–≤") {
                this.player.tugriks += 10;
                this.output.innerText += "\n–£–≥–∞–¥–∞–ª! –ù–∞—à—ë–ª 10 —Ç—É–≥—Ä–∏–∫–æ–≤.";
            } else {
                this.player.inventory.push(foundItem);
                this.output.innerText += `\n–£–≥–∞–¥–∞–ª! –ù–∞—à—ë–ª: ${foundItem}.`;
            }
            this.checkQuestCompletion(foundItem);
        } else {
            let damage = Math.floor(Math.random() * 10) + 5;
            this.player.health -= damage;
            this.output.innerText += `\n–ü—É—Å—Ç–æ! –ü–æ–∫–∞ –∫–æ–ø–∞–ª—Å—è, –ø—å—è–Ω—ã–π –±–æ–º–∂ –ø–Ω—É–ª —Ç–µ–±—è. -${damage} HP`;
        }
        this.updateGame();
    },

    miniGameRiddle() {
        let text = "\n–ì–æ–ø–Ω–∏–∫: '–≠, –ø–µ—Ç—É—Ö, –¥–æ–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –ª–æ—Ö! –û—Ç–≥–∞–¥–∞–π:'";
        let riddle = this.riddles[Math.floor(Math.random() * this.riddles.length)];
        text += `\n${riddle.question}`;
        riddle.options.forEach((opt, i) => text += `\n${i + 1}. ${opt}`);
        this.output.innerText += text;

        let choice = prompt("–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç (1-4):");
        if (parseInt(choice) - 1 === riddle.correct) {
            let reward = Math.floor(Math.random() * 20) + 10;
            this.player.tugriks += reward;
            this.output.innerText += `\n–ì–æ–ø–Ω–∏–∫: '–ú–æ–ª–æ–¥–µ—Ü, –ø–µ—Ç—É—Ö! –í–æ—Ç —Ç–µ–±–µ ${reward} —Ç—É–≥—Ä–∏–∫–æ–≤.'`;
        } else {
            let damage = Math.floor(Math.random() * 10) + 5;
            this.player.health -= damage;
            this.output.innerText += `\n–ì–æ–ø–Ω–∏–∫: '–õ–æ—Ö —Ç—ã!' *–±—å—ë—Ç –≤ —Ä—ã–ª–æ* -${damage} HP`;
        }
        this.updateGame();
    },

    tradeOpportunity() {
        let discount = this.player.reputation > 50 ? 10 : 0;
        let text = `\n–ë–∞—Ä—ã–≥–∞: '–ï—Å—Ç—å ${this.player.tugriks} —Ç—É–≥—Ä–∏–∫–æ–≤? –ë–µ—Ä–∏ —à–º–æ—Ç!'\n`;
        text += `1 ‚Äî –ë–∞–ª—Ç–∏–∫–∞ (${50 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤), 2 ‚Äî –î–æ–∑–∞ (${70 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤), 3 ‚Äî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è`;
        this.output.innerText += text;
        let choice = prompt("–ß—Ç–æ –±–µ—Ä—ë—à—å? (1, 2, 3):");

        if (choice === "1" && this.player.tugriks >= (50 - discount)) {
            this.player.tugriks -= (50 - discount);
            this.player.inventory.push("–ø–æ–ª–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'");
            this.output.innerText += `\n–ö—É–ø–∏–ª '–ë–∞–ª—Ç–∏–∫—É' –∑–∞ ${50 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤!`;
        } else if (choice === "2" && this.player.tugriks >= (70 - discount)) {
            this.player.tugriks -= (70 - discount);
            this.player.inventory.push("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞");
            this.output.innerText += `\n–ö—É–ø–∏–ª –¥–æ–∑—É –∑–∞ ${70 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤!`;
        } else if (choice === "3") {
            this.output.innerText += "\n–ë–∞—Ä—ã–≥–∞ –ø–ª—é–Ω—É–ª —Ç–µ–±–µ –ø–æ–¥ –Ω–æ–≥–∏ –∏ —É—à—ë–ª.";
        } else {
            this.output.innerText += "\n'–ß—ë –±–æ—Ä–º–æ—á–µ—à—å?' ‚Äî –±–∞—Ä—ã–≥–∞ —É—Ö–æ–¥–∏—Ç.";
        }
        this.updateGame();
    },

    action(command) {
        if (this.danyaActive) return;

        let text = "";
        let reputationMod = this.player.reputation < 0 ? 2 : 0;

        if (command === "–∏—Å–∫–∞—Ç—å") {
            let dangerRoll = Math.random() * 10;
            if (Math.random() > 0.7) {
                this.miniGameRiddle();
            } else if (dangerRoll > this.currentLocation.danger_level + reputationMod) {
                this.miniGameGuessContainer();
            } else {
                let attacker = this.currentLocation.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞" ? "–Ω–∞—Ä–∫–æ–º–∞–Ω—ã" : ["–∫—Ä—ã—Å—ã", "—Å–∫–∏–Ω—Ö–µ–¥—ã", "–ø—å—è–Ω—ã–π –¥–≤–æ—Ä–Ω–∏–∫"][Math.floor(Math.random() * 3)];
                if (this.player.inventory.includes("—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å") && (attacker === "—Å–∫–∏–Ω—Ö–µ–¥—ã" || attacker === "–Ω–∞—Ä–∫–æ–º–∞–Ω—ã")) {
                    text += `–¢—ã –æ—Ç–±–∏–ª—Å—è –æ—Ç ${attacker} —Ä–∂–∞–≤—ã–º –≥–≤–æ–∑–¥—ë–º!`;
                } else {
                    let damage = Math.floor(Math.random() * 16) + 5;
                    this.player.health -= damage;
                    text += `–ù–∞–ø–∞–ª–∏ ${attacker}! -${damage} HP`;
                }
                this.output.innerText += "\n" + text;
                this.updateGame();
            }
        } else if (command === "—É–π—Ç–∏") {
            this.currentLocation = this.locations[Math.floor(Math.random() * this.locations.length)];
            text += "–¢—ã —Å–≤–∞–ª–∏–ª –∫ –¥—Ä—É–≥–æ–π –º—É—Å–æ—Ä–∫–µ...";
            this.output.innerText += "\n" + text;
            this.updateGame();
        } else if (command === "–ø–æ–∑–≤–∞—Ç—å –î–∞–Ω—é") {
            let danyaChance = this.player.reputation > 50 ? 0.9 : 0.7;
            if (Math.random() < danyaChance) {
                this.danyaActive = true;
                text += "\n–î–∞–Ω—è –≤—ã–ª–µ–∑: '–û, –∫–µ–Ω—Ç! –î–∞—à—å –Ω–∞ –æ–ø–æ—Ö–º–µ–ª?'";
                this.danyaOptions.style.display = "block";
            } else {
                text += "\n–î–∞–Ω—è –≥–¥–µ-—Ç–æ –Ω–∞–∂—Ä–∞–ª—Å—è –∏ —Å–ø–∏—Ç.";
            }
            this.output.innerText += "\n" + text;
            this.updateGame();
        }
    },

    useItem(item) {
        if (!this.player.inventory.includes(item)) {
            this.output.innerText += "\n–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ.";
            return;
        }

        let text = "";
        if (item === "–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏") {
            this.player.health += 15;
            text = "–°–æ–∂—Ä–∞–ª —Ç—É—à—ë–Ω–∫—É! +15 HP";
        } else if (item === "–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'" || item === "–ø–æ–ª–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'") {
            this.player.is_drunk = true;
            text = "–í—ã–∂—Ä–∞–ª '–ë–∞–ª—Ç–∏–∫—É'. –°–∫–æ—Ä–æ –ø–∏–∑–¥–µ—Ü!";
            setTimeout(() => {
                this.player.health -= 15;
                this.player.reputation -= 20;
                this.player.is_drunk = false;
                this.output.innerText += "\n–ü—Ä–æ—Å–Ω—É–ª—Å—è –≤ –ª—É–∂–µ –º–æ—á–∏. -15 HP, -20 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏";
                this.updateGame();
            }, 5000);
        } else if (item === "–¥–æ—à–∏—Ä–∞–∫") {
            this.player.health += 5;
            text = "–°–æ–∂—Ä–∞–ª —Å—É—Ö–æ–π –¥–æ—à–∏–∫. +5 HP";
        } else if (item === "–∫–ª—é—á –æ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã") {
            this.currentLocation = this.locations.find(loc => loc.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞");
            text = "–û—Ç–∫—Ä—ã–ª —Ö–∞—Ç—É...";
        } else if (item === "–±–∏—Ç—ã–π –∫–∏—Ä–ø–∏—á" && this.currentLocation.name === "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É '–ü—è—Ç—ë—Ä–æ—á–∫–∏'") {
            this.player.inventory.push("—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'");
            text = "–†–∞–∑—ä–µ–±–∞–ª –æ–∫–Ω–æ '–ü—è—Ç—ë—Ä–æ—á–∫–∏' –∏ —Å–ø–∏–∑–¥–∏–ª —á–µ–∫—É—à–∫—É!";
        } else if (item === "–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞" && this.player.is_addicted) {
            this.player.health += 10;
            text = "–®–∏—Ä–Ω—É–ª—Å—è. –õ–æ–º–∫–∞ —É—à–ª–∞! +10 HP";
        } else if (item === "–≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü" && this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
            this.startAddiction();
            this.player.has_hiv = true;
            this.player.health -= 20;
            this.player.inventory.splice(this.player.inventory.indexOf("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞"), 1);
            text = "–®–∏—Ä–Ω—É–ª—Å—è –≥—Ä—è–∑–Ω—ã–º —à–ø—Ä–∏—Ü–æ–º. –ó–∞–≤–∏—Å–∏–º –∏ —Å –í–ò–ß! -20 HP";
        } else if (item === "–±–∞–±—É—à–∫–∏–Ω —Å—É–ø") {
            this.player.health += 30;
            text = "–í—ã–∂—Ä–∞–ª —Å—É–ø. –î–µ—Ç—Å—Ç–≤–æ –≤—Å–ø–æ–º–Ω–∏–ª! +30 HP";
        } else if (item === "–∫–æ–ª—å—Ü–æ —Å —Ñ–∏–∞–Ω–∏—Ç–æ–º" && this.currentLocation.name === "–õ–æ–º–±–∞—Ä–¥") {
            this.player.tugriks += 100;
            text = "–°–¥–∞–ª –∫–æ–ª—å—Ü–æ. +100 —Ç—É–≥—Ä–∏–∫–æ–≤!";
        } else if (item === "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç" && this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
            this.player.inventory.splice(this.player.inventory.indexOf("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞"), 1);
            this.player.inventory.push("–ø–∞—á–∫–∞ —Å —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–æ–º");
            text = "–°–ø—Ä—è—Ç–∞–ª –¥–æ–∑—É –≤ –ø–∞—á–∫—É.";
        } else if (item === "—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞") {
            this.player.reputation += 10;
            text = "–ù–∞—Ç—è–Ω—É–ª –∫—É—Ä—Ç–∫—É. –í—ã–≥–ª—è–¥–∏—à—å —á—É—Ç—å –ª—É—á—à–µ! +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏";
        } else if (item === "–∫—Ä—ã—Å–∏–Ω—ã–π —è–¥") {
            this.player.health -= 10;
            text = "–°–ª—É—á–∞–π–Ω–æ –≤–¥–æ—Ö–Ω—É–ª –∫—Ä—ã—Å–∏–Ω—ã–π —è–¥. -10 HP";
        } else {
            text = "–ù–µ —Å—é–¥–∞ –∏ –Ω–µ —Ç–∞–∫.";
            this.output.innerText += "\n" + text;
            return;
        }

        this.player.inventory.splice(this.player.inventory.indexOf(item), 1);
        this.output.innerText += "\n" + text;
        this.updateGame();
    },

    danyaAction(action) {
        let text = "";
        const danyaQuests = {
            "—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤": { description: "–°–∫–∏–Ω—Ö–µ–¥—ã —Å–ø—Ä—è—Ç–∞–ª–∏ '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ' –≤ –≥–∞—Ä–∞–∂–∞—Ö.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ä–µ—Ö–∞–±" },
            "–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É": { description: "–î–∞–Ω—è —Ö–æ—á–µ—Ç –∂—Ä–∞—Ç—å –ø–æ—Å–ª–µ –≤—á–µ—Ä–∞.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –±–∞–±—É—à–∫—É —Å —Å—É–ø–æ–º" },
            "–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'": { description: "–î–ª—è '–ª–µ—á–µ–Ω–∏—è'.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –ø–æ–±–µ–≥ –æ—Ç —Å–∫–∏–Ω—Ö–µ–¥–æ–≤" }
        };

        if (action === "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å") {
            if (Object.keys(this.player.quests).length === 0) {
                text += "\n–î–∞–Ω—è: '–ï—Å—Ç—å –¥–µ–ª–æ, –±—Ä–∞—Ç–∞–Ω...'";
                for (let quest in danyaQuests) {
                    text += `\n- '${quest}': ${danyaQuests[quest].description}`;
                }
                let questChoice = prompt("–í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:").toLowerCase();
                if (questChoice in danyaQuests) {
                    this.player.quests[questChoice] = danyaQuests[questChoice];
                    text += `\n–î–∞–Ω—è: '–°–¥–µ–ª–∞–µ—à—å ‚Äî –±—É–¥–µ—Ç ${danyaQuests[questChoice].reward}!'`;
                } else {
                    text += "\n'–¢—ã —á—ë, –±–æ–ª—å–Ω–æ–π?' ‚Äî –î–∞–Ω—è —É—Ö–æ–¥–∏—Ç.";
                }
            } else {
                text += "\n–î–∞–Ω—è: '–î–µ–ª–∞–π, —á—Ç–æ –≤–∑—è–ª —É–∂–µ!'";
            }
        } else if (action === "–¥–∞—Ç—å –±—É—Ö–ª–æ") {
            if (this.player.inventory.includes("–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'")) {
                this.player.inventory.splice(this.player.inventory.indexOf("–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'"), 1);
                this.player.reputation += 30;
                text += "\n–î–∞–Ω—è –≥–ª—É—à–∏—Ç '–ë–∞–ª—Ç–∏–∫—É': '–í —Ä–µ—Ö–∞–±–µ —è...' *–±–ª—é—ë—Ç*";
            } else {
                text += "\n'–ì–¥–µ –±—É—Ö–ª–æ, —Å—É–∫–∞?' ‚Äî –î–∞–Ω—è –∑–ª–∏—Ç—Å—è.";
            }
        } else if (action === "—É–π—Ç–∏") {
            text += "\n–î–∞–Ω—è —Å–≤–∞–ª–∏–ª.";
        }

        this.danyaActive = false;
        this.danyaOptions.style.display = "none";
        this.output.innerText += text;
        this.updateGame();
    },

    checkQuestCompletion(foundItem) {
        if (foundItem === "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'" && "—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤" in this.player.quests) {
            this.completeQuest("—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤");
        } else if (foundItem === "—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'" && "–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'" in this.player.quests) {
            this.completeQuest("–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'");
        } else if (foundItem === "–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏" && "–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É" in this.player.quests) {
            this.completeQuest("–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É");
        }
    },

    completeQuest(quest) {
        const stories = {
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ä–µ—Ö–∞–±": "‚Äî –í —Ä–µ—Ö–∞–±–µ –º–µ–¥—Å–µ—Å—Ç—Ä–∞ —Ç–∞–∫–∞—è: '–î–∞–Ω—è, —Ç—ã –≤ –¥–µ—Ä—å–º–µ!', –∞ —è: '–≠—Ç–æ –õ—ë—Ö–∞!'",
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –±–∞–±—É—à–∫–∞ —Å —Å—É–ø–æ–º": "‚Äî –ë–∞–±–∫–∞ –æ—Ä–∞–ª–∞: '–°–¥–æ—Ö–Ω–∏!', –∞ —Å—É–ø ‚Äî –∑–∞–µ–±–∏—Å—å, —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π...",
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –ø–æ–±–µ–≥ –æ—Ç —Å–∫–∏–Ω—Ö–µ–¥–æ–≤": "‚Äî –ë–µ–∂–∞–ª, –∞ –æ–Ω–∏: '–°—Ç–æ–π, –∞–ª–∫–∞—à!' –Ø –≤—Å—Ç–∞–ª ‚Äî –ø–æ—Ö*–π."
        };
        let rewardStory = this.player.quests[quest].reward;
        this.output.innerText += `\n–î–∞–Ω—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç: ${stories[rewardStory]}`;
        this.player.reputation += 50;
        delete this.player.quests[quest];
        this.updateGame();
    }
};

function showUseItemPrompt() {
    let item = prompt("–ß—Ç–æ —é–∑–Ω—É—Ç—å?").toLowerCase();
    game.useItem(item);
}

game.init();
