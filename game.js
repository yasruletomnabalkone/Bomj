const game = {
    player: {
        health: 100,
        strength: 5,
        inventory: [],
        reputation: 0,
        tugriks: 0,
        quests: {},
        is_addicted: false,
        has_hiv: false,
        is_drunk: false,
        addictionTimer: null
    },

    locations: [
        { name: "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É '–ü—è—Ç—ë—Ä–æ—á–∫–∏'", description: "–í–æ–Ω—è–µ—Ç —Ç—É—Ö–ª—ã–º –±–æ—Ä—â–æ–º –∏ –Ω–∞–¥–µ–∂–¥–æ–π. –í —É–≥–ª—É —Ä–∂–∞–≤–µ–µ—Ç –¥–µ—Ç—Å–∫–∞—è –∫–æ–ª—è—Å–∫–∞.", items: ["–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'", "–¥–æ—à–∏—Ä–∞–∫", "–∫–ª—é—á –æ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã", "–±–∏—Ç—ã–π –∫–∏—Ä–ø–∏—á"], danger_level: 2, unique_action: "—Ä–∞–∑–±–∏—Ç—å –æ–∫–Ω–æ" },
        { name: "–ì–∞—Ä–∞–∂–∏ –∑–∞ –¥–æ–º–æ–º", description: "–¢–µ–º–Ω–æ, –ø–∞—Ö–Ω–µ—Ç –±–µ–Ω–∑–∏–Ω–æ–º –∏ —Å—Ç—Ä–∞—Ö–æ–º. –ó–¥–µ—Å—å –ø—Ä—è—á—É—Ç—Å—è —Å–∫–∏–Ω—Ö–µ–¥—ã.", items: ["—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'", "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'", "—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å", "–∫–∞–Ω–∏—Å—Ç—Ä–∞ –±–µ–Ω–∑–∏–Ω–∞"], danger_level: 7, unique_action: "—Å–ø–∏–∑–¥–∏—Ç—å –±–µ–Ω–∑–∏–Ω" },
        { name: "–ü–æ–º–æ–π–∫–∞ —É –ø–∞—Ä–∞–¥–Ω–æ–π", description: "–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ–π–∫–∞: –±–∏—Ç—ã–µ —á–∞—à–∫–∏ –∏ —à–∞–º–ø–∞–Ω—Å–∫–æ–µ.", items: ["–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏", "–±–∞–±—É—à–∫–∏–Ω —Å—É–ø", "–∫–æ–ª—å—Ü–æ —Å —Ñ–∏–∞–Ω–∏—Ç–æ–º"], danger_level: 3, unique_action: "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞" },
        { name: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞", description: "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è —Ö–∞—Ç–∞ —Å –æ–±–æ–¥—Ä–∞–Ω–Ω—ã–º–∏ –æ–±–æ—è–º–∏ –∏ –∑–∞–ø–∞—Ö–æ–º —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞.", items: ["–≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü", "–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞", "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç"], danger_level: 10, unique_action: "–æ–±—ã—Å–∫–∞—Ç—å —Ç–∞–π–Ω–∏–∫" },
        { name: "–õ–æ–º–±–∞—Ä–¥", description: "–¢—ë–º–Ω—ã–π –∑–∞–∫—É—Ç–æ–∫ —Å –º—É—Ç–Ω—ã–º —Ç–∏–ø–æ–º –∑–∞ —Å—Ç–æ–π–∫–æ–π.", items: ["—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å", "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç"], danger_level: 4, unique_action: "–ø—Ä–æ–¥–∞—Ç—å —à–º–æ—Ç" },
        { name: "–ü–æ–¥–≤–∞–ª", description: "–°—ã—Ä–æ–π –ø–æ–¥–≤–∞–ª —Å –∫—Ä—ã—Å–∞–º–∏ –∏ —à–º–æ—Ç–∫–∞–º–∏.", items: ["—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞", "–∫—Ä—ã—Å–∏–Ω—ã–π —è–¥", "10 —Ç—É–≥—Ä–∏–∫–æ–≤"], danger_level: 5, unique_action: "–ø–æ–π–º–∞—Ç—å –∫—Ä—ã—Å—É" },
        { name: "–ü–∞—Ä–∞–¥–Ω–∞—è", description: "–û–±–æ—Å—Å–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–¥–Ω–∞—è —Å –≥—Ä–∞—Ñ—Ñ–∏—Ç–∏ '–î–∞–Ω—è ‚Äî –ª–æ—Ö'.", items: ["–ø–∞–∫–µ—Ç —Å –∫–ª–µ–µ–º", "–º–æ–±–∏–ª—å–Ω–∏–∫ –±–µ–∑ —Å–∏–º–∫–∏"], danger_level: 3, unique_action: "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –¥–æ–º–æ—Ñ–æ–Ω" }
    ],

    weather: "—è—Å–Ω–æ",
    timeOfDay: "–¥–µ–Ω—å",
    npcs: [
        { name: "–ë–∞–±–∫–∞ —Å –∫–ª—é–∫–æ–π", location: "–ü–æ–º–æ–π–∫–∞ —É –ø–∞—Ä–∞–¥–Ω–æ–π", quest: "–ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å—É–ø", reward: { tugriks: 20, reputation: 10 } },
        { name: "–°–∫–∏–Ω—Ö–µ–¥ –ü–µ—Ç—è", location: "–ì–∞—Ä–∞–∂–∏ –∑–∞ –¥–æ–º–æ–º", quest: "–¥–∞—Ç—å '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ'", reward: { strength: 2, reputation: 20 } },
        { name: "–ú–µ–Ω—Ç—ã", location: null, quest: null, effect: "—à–º–æ–Ω" }
    ],

    riddles: [
        {
            question: "–ï—Å—Ç—å –¥–≤–∞ —Å—Ç—É–ª–∞ ‚Äî –Ω–∞ –æ–¥–Ω–æ–º –ø–∏–∫–∏ —Ç–æ—á—ë–Ω—ã–µ, –Ω–∞ –¥—Ä—É–≥–æ–º —Ö—É–∏ –¥—Ä–æ—á—ë–Ω–Ω—ã–µ, –Ω–∞ –∫–∞–∫–æ–π —Å–∞–º —Å—è–¥–µ—à—å, –Ω–∞ –∫–∞–∫–æ–π –º–∞—Ç—å –ø–æ—Å–∞–¥–∏—à—å?",
            options: [
                "–°—è–¥—É –Ω–∞ –ø–∏–∫–∏, –º–∞—Ç—å –Ω–∞ —Ö—É–∏.",
                "–°—è–¥—É –Ω–∞ —Ö—É–∏, –º–∞—Ç—å –Ω–∞ –ø–∏–∫–∏.",
                "–í–æ–∑—å–º—É –ø–∏–∫–∏, —Å—Ä–µ–∂—É —Ö—É–∏, —Å–∞–º —Å—è–¥—É –Ω–∞ —Å—Ç—É–ª –∏ –º–∞—Ç—å –Ω–∞ –∫–æ–ª–µ–Ω–∏ –ø–æ—Å–∞–∂—É.",
                "–û–±–∞ —Å—Ç—É–ª–∞ —Å–ª–æ–º–∞—é –∏ —É–π–¥—É."
            ],
            correct: 2
        }
    ],

    currentLocation: null,
    output: document.getElementById("output"),
    danyaOptions: document.getElementById("danya-options"),

    init() {
        this.loadGame();
        if (!this.currentLocation) this.currentLocation = this.locations[0];
        this.updateWeatherAndTime();
        this.updateGame();
    },

    saveGame() {
        localStorage.setItem("gameState", JSON.stringify({
            player: this.player,
            currentLocation: this.currentLocation,
            weather: this.weather,
            timeOfDay: this.timeOfDay
        }));
    },

    loadGame() {
        const saved = localStorage.getItem("gameState");
        if (saved) {
            const state = JSON.parse(saved);
            Object.assign(this.player, state.player);
            this.currentLocation = state.currentLocation;
            this.weather = state.weather;
            this.timeOfDay = state.timeOfDay;
        }
    },

    updateWeatherAndTime() {
        const weathers = ["—è—Å–Ω–æ", "–¥–æ–∂–¥—å", "—Å–Ω–µ–≥"];
        const times = ["—É—Ç—Ä–æ", "–¥–µ–Ω—å", "–≤–µ—á–µ—Ä", "–Ω–æ—á—å"];
        if (Math.random() > 0.7) this.weather = weathers[Math.floor(Math.random() * weathers.length)];
        if (Math.random() > 0.5) this.timeOfDay = times[Math.floor(Math.random() * times.length)];
        
        document.body.className = ""; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã
        if (this.weather === "–¥–æ–∂–¥—å") document.body.classList.add("rain");
        if (this.weather === "—Å–Ω–µ–≥") document.body.classList.add("snow");
        if (this.timeOfDay === "–Ω–æ—á—å") document.body.classList.add("night");

        if (this.weather === "–¥–æ–∂–¥—å" && !this.player.inventory.includes("—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞")) {
            this.player.health -= 5;
            addOutput("–î–æ–∂–¥—å –ø—Ä–æ–º–æ—á–∏–ª —Ç–µ–±—è –¥–æ –∫–æ—Å—Ç–µ–π. -5 HP");
        }
        if (this.timeOfDay === "–Ω–æ—á—å") {
            addOutput("–ù–æ—á—å. –®–º–æ—Ç–∫–∏ –Ω–∞–π—Ç–∏ —Å–ª–æ–∂–Ω–µ–µ, –Ω–æ —Ç—É–≥—Ä–∏–∫–∏ –≤ —Ç–∞–π–Ω–∏–∫–∞—Ö.");
        }
    },

    updateStatus() {
        let status = `‚ô• –ó–¥–æ—Ä–æ–≤—å–µ: ${this.player.health} | üí™ –°–∏–ª–∞: ${this.player.strength} | üé≠ –†–µ–ø—É—Ç–∞—Ü–∏—è: ${this.player.reputation} | üí∞ –¢—É–≥—Ä–∏–∫–∏: ${this.player.tugriks}\n`;
        status += `üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: ${this.player.inventory.length > 0 ? this.player.inventory.join(", ") : "–ø—É—Å—Ç–æ"}\n`;
        status += `üå¶ –ü–æ–≥–æ–¥–∞: ${this.weather} | üïí –í—Ä–µ–º—è: ${this.timeOfDay}\n`;
        if (this.player.is_addicted) status += "üíâ –¢—ã –∑–∞–≤–∏—Å–∏–º –æ—Ç —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞!\n";
        if (this.player.has_hiv) status += "ü©∫ –£ —Ç–µ–±—è –í–ò–ß!\n";
        if (this.player.is_drunk) status += "üç∫ –¢—ã –ø—å—è–Ω—ã–π!\n";
        document.getElementById("status").innerText = status;

        const questList = document.getElementById("quest-list");
        questList.innerHTML = "";
        for (let quest in this.player.quests) {
            const li = document.createElement("li");
            li.innerText = `${quest}: ${this.player.quests[quest].description}`;
            questList.appendChild(li);
        }
    },

    updateGame() {
        let text = `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å: ${this.currentLocation.name}\n${this.currentLocation.description}`;
        if (this.timeOfDay === "–Ω–æ—á—å") text += " –ù–æ—á—å —Å–∫—Ä—ã–≤–∞–µ—Ç –º—É—Å–æ—Ä.";
        if (this.weather === "–¥–æ–∂–¥—å") text += " –î–æ–∂–¥—å –∑–∞–ª–∏–≤–∞–µ—Ç –≤—Å—ë –≤–æ–∫—Ä—É–≥.";

        if (this.currentLocation.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞" && !this.player.has_hiv && Math.random() > 0.5) {
            text += "\n–û–±–¥–æ–ª–±–∞–Ω–Ω—ã–π –Ω–∞—Ä–∏–∫ –≤—Ç—ã–∫–∞–µ—Ç –≤ —Ç–µ–±—è –≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü!";
            this.startAddiction();
            this.player.has_hiv = true;
            this.player.health -= 20;
            text += "\n–¢—ã —Å—Ç–∞–ª –∑–∞–≤–∏—Å–∏–º—ã–º –æ—Ç —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞ –∏ –∑–∞—Ä–∞–∑–∏–ª—Å—è –í–ò–ß! -20 HP";
        }

        if (this.player.health <= 0) {
            if (this.player.is_addicted) {
                text += "\n–¢—ã –Ω–∞—à—ë–ª –≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü –Ω–∞ —É–ª–∏—Ü–µ, —à–∏—Ä–Ω—É–ª—Å—è –∏ —É–º–µ—Ä –æ—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–æ–≤–∏. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.";
            } else {
                text += "\n–¢—ã —Å–≥–Ω–∏–ª –≤ –ø–∏—Ç–µ—Ä—Å–∫–∏—Ö –ø–æ–º–æ–π–∫–∞—Ö. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.";
            }
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        } else if (this.player.tugriks >= 1000) {
            text += "\n–¢—ã –Ω–∞–±—Ä–∞–ª 1000 —Ç—É–≥—Ä–∏–∫–æ–≤! –°–Ω—è–ª —Ö–∞—Ç—É, –Ω–∞—à—ë–ª —Ä–∞–±–æ—Ç—É –∏ –≤—ã–±—Ä–∞–ª—Å—è –∏–∑ —ç—Ç–æ–≥–æ –¥–µ—Ä—å–º–∞. –ü–æ–±–µ–¥–∞!";
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        } else if (this.player.reputation >= 100) {
            text += "\n–¢—ã —Å—Ç–∞–ª –∫–æ—Ä–æ–ª—ë–º –ø–æ–º–æ–π–∫–∏! –í—Å–µ —É–≤–∞–∂–∞—é—Ç —Ç–µ–±—è, –¥–∞–∂–µ —Å–∫–∏–Ω—Ö–µ–¥—ã. –ü–æ–±–µ–¥–∞!";
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        } else if (this.player.is_addicted && this.player.has_hiv && this.player.health < 20) {
            text += "\n–¢—ã —Å–≥–Ω–∏–ª –≤ –ø–æ–¥–≤–∞–ª–µ, –Ω–æ —Å—Ç–∞–ª –ª–µ–≥–µ–Ω–¥–æ–π —Å—Ä–µ–¥–∏ –Ω–∞—Ä–∏–∫–æ–≤. –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã.";
            document.getElementById("actions").style.display = "none";
            clearInterval(this.player.addictionTimer);
        }

        this.output.innerText = text;
        this.updateStatus();
        this.saveGame();

        if (this.player.tugriks >= 50 && Math.random() > 0.7) {
            this.tradeOpportunity();
        }
        if (Math.random() > 0.9) {
            this.randomEvent();
        }
    },

    startAddiction() {
        this.player.is_addicted = true;
        if (!this.player.addictionTimer) {
            this.player.addictionTimer = setInterval(() => {
                if (!this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
                    this.player.health -= 5;
                    addOutput("–õ–æ–º–∫–∞ –±—å—ë—Ç... -5 HP");
                    this.updateGame();
                }
            }, 10000);
        }
    },

    combineItems(item1, item2) {
        let text = "";
        if (item1 === "–¥–æ—à–∏—Ä–∞–∫" && item2 === "—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'" && this.player.inventory.includes(item1) && this.player.inventory.includes(item2)) {
            this.player.inventory.splice(this.player.inventory.indexOf(item1), 1);
            this.player.inventory.splice(this.player.inventory.indexOf(item2), 1);
            this.player.inventory.push("–≥–æ—Ä—è—á–∏–π –¥–æ—à–∏–∫");
            text = "–ó–∞–ª–∏–ª –¥–æ—à–∏–∫ —á–µ–∫—É—à–∫–æ–π. –ü–æ–ª—É—á–∏–ª—Å—è –≥–æ—Ä—è—á–∏–π –¥–æ—à–∏–∫!";
        } else if (item1 === "—Ä–∂–∞–≤—ã–π –≥–≤–æ–∑–¥—å" && item2 === "—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞" && this.player.inventory.includes(item1) && this.player.inventory.includes(item2)) {
            this.player.inventory.splice(this.player.inventory.indexOf(item1), 1);
            this.player.inventory.splice(this.player.inventory.indexOf(item2), 1);
            this.player.inventory.push("—à—Ç—ã–∫-–∫—É—Ä—Ç–∫–∞");
            text = "–ü—Ä–∏—à–∏–ª –≥–≤–æ–∑–¥—å –∫ –∫—É—Ä—Ç–∫–µ. –¢–µ–ø–µ—Ä—å —ç—Ç–æ —à—Ç—ã–∫-–∫—É—Ä—Ç–∫–∞!";
        } else {
            text = "–≠—Ç–æ –Ω–µ –∫–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç—Å—è, –¥–µ–±–∏–ª.";
        }
        addOutput(text);
        this.updateGame();
    },

    fight(attacker) {
        const enemies = {
            "–∫—Ä—ã—Å—ã": { strength: 3, loot: "–∫—Ä—ã—Å–∏–Ω—ã–π —è–¥" },
            "—Å–∫–∏–Ω—Ö–µ–¥—ã": { strength: 10, loot: "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'" },
            "–ø—å—è–Ω—ã–π –¥–≤–æ—Ä–Ω–∏–∫": { strength: 7, loot: "10 —Ç—É–≥—Ä–∏–∫–æ–≤" },
            "–Ω–∞—Ä–∫–æ–º–∞–Ω—ã": { strength: 8, loot: "–≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü" }
        };
        let enemy = enemies[attacker];
        let playerStrength = this.player.strength + (this.player.inventory.includes("—à—Ç—ã–∫-–∫—É—Ä—Ç–∫–∞") ? 5 : 0);
        let text = "";

        if (playerStrength > enemy.strength) {
            text += `–¢—ã —É–¥–µ–ª–∞–ª ${attacker}! –ù–∞—à—ë–ª: ${enemy.loot}.`;
            this.player.inventory.push(enemy.loot);
            this.checkQuestCompletion(enemy.loot);
        } else {
            let damage = Math.floor(Math.random() * (enemy.strength - playerStrength + 1)) + 5;
            this.player.health -= damage;
            text += `${attacker} —É–¥–µ–ª–∞–ª–∏ —Ç–µ–±—è! -${damage} HP`;
        }
        return text;
    },

    miniGameGuessContainer() {
        let text = "–¢—Ä–∏ –±–∞–∫–∞ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π. –í –æ–¥–Ω–æ–º ‚Äî —à–º–æ—Ç–∫–∞.";
        addOutput(text);
        let choice = prompt("–í—ã–±–µ—Ä–∏ –±–∞–∫ (1, 2 –∏–ª–∏ 3):");
        if (!choice || isNaN(choice) || choice < 1 || choice > 3) {
            addOutput("–¢—ã —á—ë, –¥–µ–±–∏–ª? –£—Ä–æ–Ω -5 HP –∑–∞ —Ç—É–ø–æ—Å—Ç—å.");
            this.player.health -= 5;
            hideSearchMiniGame();
            this.updateGame();
            return;
        }

        let winningContainer = Math.floor(Math.random() * 3) + 1;
        if (parseInt(choice) === winningContainer) {
            let foundItem = this.currentLocation.items[Math.floor(Math.random() * this.currentLocation.items.length)];
            if (foundItem === "10 —Ç—É–≥—Ä–∏–∫–æ–≤") {
                this.player.tugriks += 10;
                addOutput("–£–≥–∞–¥–∞–ª! –ù–∞—à—ë–ª 10 —Ç—É–≥—Ä–∏–∫–æ–≤.");
            } else {
                this.player.inventory.push(foundItem);
                addOutput(`–£–≥–∞–¥–∞–ª! –ù–∞—à—ë–ª: ${foundItem}.`);
            }
            this.checkQuestCompletion(foundItem);
        } else {
            let damage = Math.floor(Math.random() * 10) + 5;
            this.player.health -= damage;
            addOutput(`–ü—É—Å—Ç–æ! –ü–æ–∫–∞ –∫–æ–ø–∞–ª—Å—è, –ø—å—è–Ω—ã–π –±–æ–º–∂ –ø–Ω—É–ª —Ç–µ–±—è. -${damage} HP`);
        }
        hideSearchMiniGame();
        this.updateGame();
    },

    miniGameRiddle() {
        let text = "–ì–æ–ø–Ω–∏–∫: '–≠, –ø–µ—Ç—É—Ö, –¥–æ–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –ª–æ—Ö! –û—Ç–≥–∞–¥–∞–π:'";
        let riddle = this.riddles[Math.floor(Math.random() * this.riddles.length)];
        text += `\n${riddle.question}`;
        riddle.options.forEach((opt, i) => text += `\n${i + 1}. ${opt}`);
        addOutput(text);

        let choice = prompt("–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç (1-4):");
        if (!choice || isNaN(choice) || choice < 1 || choice > 4) {
            addOutput("–¢—ã —á—ë, –¥–µ–±–∏–ª? –£—Ä–æ–Ω -5 HP –∑–∞ —Ç—É–ø–æ—Å—Ç—å.");
            this.player.health -= 5;
            this.updateGame();
            return;
        }

        if (parseInt(choice) - 1 === riddle.correct) {
            let reward = Math.floor(Math.random() * 20) + 10;
            this.player.tugriks += reward;
            addOutput(`–ì–æ–ø–Ω–∏–∫: '–ú–æ–ª–æ–¥–µ—Ü, –ø–µ—Ç—É—Ö! –í–æ—Ç —Ç–µ–±–µ ${reward} —Ç—É–≥—Ä–∏–∫–æ–≤.'`);
        } else {
            let damage = Math.floor(Math.random() * 10) + 5;
            this.player.health -= damage;
            addOutput(`–ì–æ–ø–Ω–∏–∫: '–õ–æ—Ö —Ç—ã!' *–±—å—ë—Ç –≤ —Ä—ã–ª–æ* -${damage} HP`);
        }
        this.updateGame();
    },

    tradeOpportunity() {
        let discount = this.player.reputation > 50 ? 10 : 0;
        let text = `–ë–∞—Ä—ã–≥–∞: '–ï—Å—Ç—å ${this.player.tugriks} —Ç—É–≥—Ä–∏–∫–æ–≤? –ë–µ—Ä–∏ —à–º–æ—Ç!'\n`;
        text += `1 ‚Äî –ë–∞–ª—Ç–∏–∫–∞ (${50 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤), 2 ‚Äî –î–æ–∑–∞ (${70 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤), 3 ‚Äî –ú–æ–±–∏–ª—å–Ω–∏–∫ (${100 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤), 4 ‚Äî –û—Ç–∫–∞–∑–∞—Ç—å—Å—è`;
        addOutput(text);
        let choice = prompt("–ß—Ç–æ –±–µ—Ä—ë—à—å? (1, 2, 3, 4):");

        if (choice === "1" && this.player.tugriks >= (50 - discount)) {
            this.player.tugriks -= (50 - discount);
            this.player.inventory.push("–ø–æ–ª–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'");
            addOutput(`–ö—É–ø–∏–ª '–ë–∞–ª—Ç–∏–∫—É' –∑–∞ ${50 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤!`);
        } else if (choice === "2" && this.player.tugriks >= (70 - discount)) {
            this.player.tugriks -= (70 - discount);
            this.player.inventory.push("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞");
            addOutput(`–ö—É–ø–∏–ª –¥–æ–∑—É –∑–∞ ${70 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤!`);
        } else if (choice === "3" && this.player.tugriks >= (100 - discount)) {
            this.player.tugriks -= (100 - discount);
            this.player.inventory.push("–º–æ–±–∏–ª—å–Ω–∏–∫ –±–µ–∑ —Å–∏–º–∫–∏");
            addOutput(`–ö—É–ø–∏–ª –º–æ–±–∏–ª—å–Ω–∏–∫ –∑–∞ ${100 - discount} —Ç—É–≥—Ä–∏–∫–æ–≤!`);
        } else if (choice === "4") {
            addOutput("–ë–∞—Ä—ã–≥–∞ –ø–ª—é–Ω—É–ª —Ç–µ–±–µ –ø–æ–¥ –Ω–æ–≥–∏ –∏ —É—à—ë–ª.");
        } else {
            addOutput("'–ß—ë –±–æ—Ä–º–æ—á–µ—à—å?' ‚Äî –±–∞—Ä—ã–≥–∞ —É—Ö–æ–¥–∏—Ç.");
        }
        this.updateGame();
    },

    randomEvent() {
        const events = [
            () => {
                this.player.tugriks += 50;
                return "–ù–∞—à—ë–ª –∫–æ—à–µ–ª—ë–∫ –Ω–∞ –º—É—Å–æ—Ä–∫–µ! +50 —Ç—É–≥—Ä–∏–∫–æ–≤.";
            },
            () => {
                let loss = Math.floor(this.player.tugriks / 2);
                this.player.tugriks -= loss;
                return `–ü–æ–∫–∞ —Å–ø–∞–ª, –≤–æ—Ä—ã —Å–ø–∏–∑–¥–∏–ª–∏ ${loss} —Ç—É–≥—Ä–∏–∫–æ–≤!`;
            },
            () => {
                if (this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
                    this.player.inventory.splice(this.player.inventory.indexOf("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞"), 1);
                    return "–ú–µ–Ω—Ç—ã —à–º–æ–Ω–∞—é—Ç —Ä–∞–π–æ–Ω! –î–æ–∑—É —Å–ø–∞–ª–∏–ª–∏, –∫–æ–Ω—Ñ–∏—Å–∫–æ–≤–∞–ª–∏.";
                }
                return "–ú–µ–Ω—Ç—ã —à–º–æ–Ω–∞—é—Ç —Ä–∞–π–æ–Ω, –Ω–æ —É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.";
            }
        ];
        let event = events[Math.floor(Math.random() * events.length)];
        addOutput(event());
        this.updateGame();
    },

    action(command) {
        let text = "";
        let reputationMod = this.player.reputation < 0 ? 2 : 0;

        if (command === "–∏—Å–∫–∞—Ç—å") {
            let dangerRoll = Math.random() * 10;
            if (Math.random() > 0.7) {
                this.miniGameRiddle();
            } else if (dangerRoll > this.currentLocation.danger_level + reputationMod) {
                document.getElementById("search-mini-game").style.display = "flex";
            } else {
                let attacker = this.currentLocation.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞" ? "–Ω–∞—Ä–∫–æ–º–∞–Ω—ã" : ["–∫—Ä—ã—Å—ã", "—Å–∫–∏–Ω—Ö–µ–¥—ã", "–ø—å—è–Ω—ã–π –¥–≤–æ—Ä–Ω–∏–∫"][Math.floor(Math.random() * 3)];
                text += this.fight(attacker);
                addOutput(text);
                this.updateGame();
            }
        } else if (command === "—É–π—Ç–∏") {
            showLocationPrompt();
        } else if (command === "–ø–æ–∑–≤–∞—Ç—å –î–∞–Ω—é") {
            let danyaChance = this.player.reputation > 50 ? 0.9 : 0.7;
            if (Math.random() < danyaChance) {
                this.danyaOptions.style.display = "flex";
                text += "–î–∞–Ω—è –≤—ã–ª–µ–∑: '–û, –∫–µ–Ω—Ç! –î–∞—à—å –Ω–∞ –æ–ø–æ—Ö–º–µ–ª?'";
            } else {
                text += "–î–∞–Ω—è –≥–¥–µ-—Ç–æ –Ω–∞–∂—Ä–∞–ª—Å—è –∏ —Å–ø–∏—Ç.";
            }
            addOutput(text);
            this.updateGame();
        } else if (command === "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ") {
            text += this.uniqueLocationAction();
            addOutput(text);
            this.updateGame();
        } else if (command === "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å NPC") {
            let npc = this.npcs.find(n => n.location === this.currentLocation.name);
            if (npc && npc.quest) {
                text += this.npcInteraction(npc);
            } else {
                text += "–¢—É—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, –∫—Ä–æ–º–µ –∫—Ä—ã—Å.";
            }
            addOutput(text);
            this.updateGame();
        }
    },

    uniqueLocationAction() {
        let action = this.currentLocation.unique_action;
        if (action === "—Ä–∞–∑–±–∏—Ç—å –æ–∫–Ω–æ" && this.currentLocation.name === "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É '–ü—è—Ç—ë—Ä–æ—á–∫–∏'") {
            if (this.player.inventory.includes("–±–∏—Ç—ã–π –∫–∏—Ä–ø–∏—á")) {
                this.player.inventory.push("—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'");
                return "–†–∞–∑—ä–µ–±–∞–ª –æ–∫–Ω–æ '–ü—è—Ç—ë—Ä–æ—á–∫–∏' –∏ —Å–ø–∏–∑–¥–∏–ª —á–µ–∫—É—à–∫—É!";
            }
            return "–ù–µ—á–µ–º –±–∏—Ç—å –æ–∫–Ω–æ, –¥–µ–±–∏–ª.";
        } else if (action === "—Å–ø–∏–∑–¥–∏—Ç—å –±–µ–Ω–∑–∏–Ω" && this.currentLocation.name === "–ì–∞—Ä–∞–∂–∏ –∑–∞ –¥–æ–º–æ–º") {
            if (Math.random() > 0.5) {
                this.player.inventory.push("–∫–∞–Ω–∏—Å—Ç—Ä–∞ –±–µ–Ω–∑–∏–Ω–∞");
                return "–°–ø–∏–∑–¥–∏–ª –∫–∞–Ω–∏—Å—Ç—Ä—É –±–µ–Ω–∑–∏–Ω–∞!";
            }
            return this.fight("—Å–∫–∏–Ω—Ö–µ–¥—ã");
        } else if (action === "–ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∞" && this.currentLocation.name === "–ü–æ–º–æ–π–∫–∞ —É –ø–∞—Ä–∞–¥–Ω–æ–π") {
            if (this.player.inventory.includes("–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏")) {
                this.player.inventory.splice(this.player.inventory.indexOf("–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏"), 1);
                this.player.reputation += 10;
                return "–ü–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞ —Ç—É—à—ë–Ω–∫–æ–π. –ë–∞–±–∫–∏ —É–≤–∞–∂–∞—é—Ç! +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.";
            }
            return "–ù–µ—Ç —Ç—É—à—ë–Ω–∫–∏, –∫–æ—Ç –æ—Ä—ë—Ç.";
        } else if (action === "–æ–±—ã—Å–∫–∞—Ç—å —Ç–∞–π–Ω–∏–∫" && this.currentLocation.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞") {
            if (Math.random() > 0.7) {
                this.player.tugriks += 50;
                return "–ù–∞—à—ë–ª —Ç–∞–π–Ω–∏–∫! +50 —Ç—É–≥—Ä–∏–∫–æ–≤.";
            }
            return "–¢–∞–π–Ω–∏–∫ –ø—É—Å—Ç–æ–π, —Ç–æ–ª—å–∫–æ —à–ø—Ä–∏—Ü—ã.";
        } else if (action === "–ø—Ä–æ–¥–∞—Ç—å —à–º–æ—Ç" && this.currentLocation.name === "–õ–æ–º–±–∞—Ä–¥") {
            let item = prompt("–ß—Ç–æ –ø—Ä–æ–¥–∞—Ç—å?");
            if (this.player.inventory.includes(item)) {
                let price = item === "–∫–æ–ª—å—Ü–æ —Å —Ñ–∏–∞–Ω–∏—Ç–æ–º" ? 100 : 20;
                this.player.tugriks += price;
                this.player.inventory.splice(this.player.inventory.indexOf(item), 1);
                return `–°–¥–∞–ª ${item} –∑–∞ ${price} —Ç—É–≥—Ä–∏–∫–æ–≤!`;
            }
            return "–¢–∞–∫–æ–≥–æ —à–º–æ—Ç–∞ –Ω–µ—Ç.";
        } else if (action === "–ø–æ–π–º–∞—Ç—å –∫—Ä—ã—Å—É" && this.currentLocation.name === "–ü–æ–¥–≤–∞–ª") {
            if (Math.random() > 0.5) {
                this.player.inventory.push("–¥–æ—Ö–ª–∞—è –∫—Ä—ã—Å–∞");
                return "–ü–æ–π–º–∞–ª –∫—Ä—ã—Å—É! –ú–æ–∂–µ—Ç, –±–∞–±–∫–∞ –∫—É–ø–∏—Ç?";
            }
            return "–ö—Ä—ã—Å–∞ —É–∫—É—Å–∏–ª–∞ –∏ —Å–±–µ–∂–∞–ª–∞. -5 HP";
        } else if (action === "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –¥–æ–º–æ—Ñ–æ–Ω" && this.currentLocation.name === "–ü–∞—Ä–∞–¥–Ω–∞—è") {
            if (Math.random() > 0.8) {
                this.player.tugriks += 10;
                return "–ö—Ç–æ-—Ç–æ –∫–∏–Ω—É–ª 10 —Ç—É–≥—Ä–∏–∫–æ–≤ —Å –±–∞–ª–∫–æ–Ω–∞!";
            }
            return "–¢–µ–±—è –æ–±–º–∞—Ç–µ—Ä–∏–ª–∏ —á–µ—Ä–µ–∑ –¥–æ–º–æ—Ñ–æ–Ω.";
        }
        return "–¢—É—Ç –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å.";
    },

    npcInteraction(npc) {
        if (npc.name === "–ë–∞–±–∫–∞ —Å –∫–ª—é–∫–æ–π" && npc.quest && !(npc.quest in this.player.quests)) {
            this.player.quests[npc.quest] = { description: "–ë–∞–±–∫–∞ —Ö–æ—á–µ—Ç —Å—É–ø.", reward: npc.reward };
            return "–ë–∞–±–∫–∞: '–ü—Ä–∏–Ω–µ—Å–∏ —Å—É–ø, –∞–ª–∫–∞—à, –¥–∞–º 20 —Ç—É–≥—Ä–∏–∫–æ–≤!'";
        } else if (npc.name === "–°–∫–∏–Ω—Ö–µ–¥ –ü–µ—Ç—è" && npc.quest && !(npc.quest in this.player.quests)) {
            this.player.quests[npc.quest] = { description: "–ü–µ—Ç—è —Ö–æ—á–µ—Ç '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ'.", reward: npc.reward };
            return "–ü–µ—Ç—è: '–ì–æ –ø–∏–≤–∫–∞, –±—Ä–∞—Ç–∞–Ω, –±—É–¥—É —Ç–≤–æ–π –∫–æ—Ä–µ—à!'";
        }
        return `${npc.name}: '–ß—ë –Ω–∞–¥–æ? –í–∞–ª–∏!'`;
    },

    useItem(item) {
        if (!this.player.inventory.includes(item)) {
            addOutput(`–£ —Ç–µ–±—è –Ω–µ—Ç ${item}.`);
            hideItemPrompt();
            return;
        }

        let text = "";
        if (item === "–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏") {
            this.player.health += 15;
            text = "–°–æ–∂—Ä–∞–ª —Ç—É—à—ë–Ω–∫—É! +15 HP";
        } else if (item === "–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'" || item === "–ø–æ–ª–Ω–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'") {
            this.player.is_drunk = true;
            text = "–í—ã–∂—Ä–∞–ª '–ë–∞–ª—Ç–∏–∫—É'. –°–∫–æ—Ä–æ –ø–∏–∑–¥–µ—Ü!";
            setTimeout(() => {
                this.player.health -= 15;
                this.player.reputation -= 20;
                this.player.is_drunk = false;
                addOutput("–ü—Ä–æ—Å–Ω—É–ª—Å—è –≤ –ª—É–∂–µ –º–æ—á–∏. -15 HP, -20 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏");
                this.updateGame();
            }, 5000);
        } else if (item === "–¥–æ—à–∏—Ä–∞–∫") {
            this.player.health += 5;
            text = "–°–æ–∂—Ä–∞–ª —Å—É—Ö–æ–π –¥–æ—à–∏–∫. +5 HP";
        } else if (item === "–≥–æ—Ä—è—á–∏–π –¥–æ—à–∏–∫") {
            this.player.health += 15;
            text = "–°–æ–∂—Ä–∞–ª –≥–æ—Ä—è—á–∏–π –¥–æ—à–∏–∫. –í–∫—É—Å–Ω–æ! +15 HP";
        } else if (item === "–∫–ª—é—á –æ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã") {
            this.currentLocation = this.locations.find(loc => loc.name === "–ó–∞–±—Ä–æ—à–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞");
            text = "–û—Ç–∫—Ä—ã–ª —Ö–∞—Ç—É...";
        } else if (item === "–±–∏—Ç—ã–π –∫–∏—Ä–ø–∏—á" && this.currentLocation.name === "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É '–ü—è—Ç—ë—Ä–æ—á–∫–∏'") {
            this.player.inventory.push("—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'");
            text = "–†–∞–∑—ä–µ–±–∞–ª –æ–∫–Ω–æ '–ü—è—Ç—ë—Ä–æ—á–∫–∏' –∏ —Å–ø–∏–∑–¥–∏–ª —á–µ–∫—É—à–∫—É!";
        } else if (item === "–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞" && this.player.is_addicted) {
            this.player.health += 10;
            text = "–®–∏—Ä–Ω—É–ª—Å—è. –õ–æ–º–∫–∞ —É—à–ª–∞! +10 HP";
        } else if (item === "–≥—Ä—è–∑–Ω—ã–π —à–ø—Ä–∏—Ü" && this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
            this.startAddiction();
            this.player.has_hiv = true;
            this.player.health -= 20;
            this.player.inventory.splice(this.player.inventory.indexOf("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞"), 1);
            text = "–®–∏—Ä–Ω—É–ª—Å—è –≥—Ä—è–∑–Ω—ã–º —à–ø—Ä–∏—Ü–æ–º. –ó–∞–≤–∏—Å–∏–º –∏ —Å –í–ò–ß! -20 HP";
        } else if (item === "–±–∞–±—É—à–∫–∏–Ω —Å—É–ø") {
            this.player.health += 30;
            text = "–í—ã–∂—Ä–∞–ª —Å—É–ø. –î–µ—Ç—Å—Ç–≤–æ –≤—Å–ø–æ–º–Ω–∏–ª! +30 HP";
        } else if (item === "–∫–æ–ª—å—Ü–æ —Å —Ñ–∏–∞–Ω–∏—Ç–æ–º" && this.currentLocation.name === "–õ–æ–º–±–∞—Ä–¥") {
            this.player.tugriks += 100;
            text = "–°–¥–∞–ª –∫–æ–ª—å—Ü–æ. +100 —Ç—É–≥—Ä–∏–∫–æ–≤!";
        } else if (item === "–ø—É—Å—Ç–∞—è –ø–∞—á–∫–∞ —Å–∏–≥–∞—Ä–µ—Ç" && this.player.inventory.includes("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞")) {
            this.player.inventory.splice(this.player.inventory.indexOf("–¥–æ–∑–∞ —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–∞"), 1);
            this.player.inventory.push("–ø–∞—á–∫–∞ —Å —Ñ–µ–Ω—Ç–∞–Ω–∏–ª–æ–º");
            text = "–°–ø—Ä—è—Ç–∞–ª –¥–æ–∑—É –≤ –ø–∞—á–∫—É.";
        } else if (item === "—Å—Ç–∞—Ä–∞—è –∫—É—Ä—Ç–∫–∞") {
            this.player.reputation += 10;
            text = "–ù–∞—Ç—è–Ω—É–ª –∫—É—Ä—Ç–∫—É. –í—ã–≥–ª—è–¥–∏—à—å —á—É—Ç—å –ª—É—á—à–µ! +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏";
        } else if (item === "—à—Ç—ã–∫-–∫—É—Ä—Ç–∫–∞") {
            this.player.reputation += 20;
            this.player.strength += 2;
            text = "–ù–∞—Ç—è–Ω—É–ª —à—Ç—ã–∫-–∫—É—Ä—Ç–∫—É. –¢–µ–ø–µ—Ä—å —Ç—ã –æ–ø–∞—Å–µ–Ω! +20 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, +2 —Å–∏–ª—ã";
        } else if (item === "–∫—Ä—ã—Å–∏–Ω—ã–π —è–¥") {
            this.player.health -= 10;
            text = "–°–ª—É—á–∞–π–Ω–æ –≤–¥–æ—Ö–Ω—É–ª –∫—Ä—ã—Å–∏–Ω—ã–π —è–¥. -10 HP";
        } else if (item === "–ø–∞–∫–µ—Ç —Å –∫–ª–µ–µ–º") {
            this.player.reputation += 10;
            this.player.health -= 5;
            text = "–ù—é—Ö–Ω—É–ª –∫–ª–µ–π. –ì–æ–ø–Ω–∏–∫–∏ —É–≤–∞–∂–∞—é—Ç, –Ω–æ –±–∞—à–∫–∞ –±–æ–ª–∏—Ç. +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, -5 HP";
        } else if (item === "–º–æ–±–∏–ª—å–Ω–∏–∫ –±–µ–∑ —Å–∏–º–∫–∏" && this.currentLocation.name === "–õ–æ–º–±–∞—Ä–¥") {
            this.player.tugriks += 50;
            text = "–°–¥–∞–ª –º–æ–±–∏–ª—å–Ω–∏–∫. +50 —Ç—É–≥—Ä–∏–∫–æ–≤!";
        } else if (item === "–∫–∞–Ω–∏—Å—Ç—Ä–∞ –±–µ–Ω–∑–∏–Ω–∞" && this.currentLocation.name === "–ì–∞—Ä–∞–∂–∏ –∑–∞ –¥–æ–º–æ–º") {
            this.player.tugriks += 30;
            text = "–°–¥–∞–ª –±–µ–Ω–∑–∏–Ω —Å–∫–∏–Ω—Ö–µ–¥–∞–º. +30 —Ç—É–≥—Ä–∏–∫–æ–≤!";
        } else {
            text = "–ù–µ —Å—é–¥–∞ –∏ –Ω–µ —Ç–∞–∫.";
            addOutput(text);
            hideItemPrompt();
            return;
        }

        this.player.inventory.splice(this.player.inventory.indexOf(item), 1);
        addOutput(text);
        this.checkQuestCompletion(item);
        hideItemPrompt();
        this.updateGame();
    },

    danyaAction(action) {
        let text = "";
        const danyaQuests = {
            "—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤": { description: "–°–∫–∏–Ω—Ö–µ–¥—ã —Å–ø—Ä—è—Ç–∞–ª–∏ '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ' –≤ –≥–∞—Ä–∞–∂–∞—Ö.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ä–µ—Ö–∞–±" },
            "–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É": { description: "–î–∞–Ω—è —Ö–æ—á–µ—Ç –∂—Ä–∞—Ç—å –ø–æ—Å–ª–µ –≤—á–µ—Ä–∞.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –±–∞–±—É—à–∫—É —Å —Å—É–ø–æ–º" },
            "–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'": { description: "–î–ª—è '–ª–µ—á–µ–Ω–∏—è'.", reward: "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –ø–æ–±–µ–≥ –æ—Ç —Å–∫–∏–Ω—Ö–µ–¥–æ–≤" }
        };

        if (action === "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å") {
            if (Object.keys(this.player.quests).length === 0) {
                text += "–î–∞–Ω—è: '–ï—Å—Ç—å –¥–µ–ª–æ, –±—Ä–∞—Ç–∞–Ω...'";
                for (let quest in danyaQuests) {
                    text += `\n- '${quest}': ${danyaQuests[quest].description}`;
                }
                let questChoice = prompt("–í—ã–±–µ—Ä–∏ –∫–≤–µ—Å—Ç:").toLowerCase();
                if (questChoice in danyaQuests) {
                    this.player.quests[questChoice] = danyaQuests[questChoice];
                    text += `\n–î–∞–Ω—è: '–°–¥–µ–ª–∞–µ—à—å ‚Äî –±—É–¥–µ—Ç ${danyaQuests[questChoice].reward}!'`;
                } else {
                    text += "\n'–¢—ã —á—ë, –±–æ–ª—å–Ω–æ–π?' ‚Äî –î–∞–Ω—è —É—Ö–æ–¥–∏—Ç.";
                }
            } else {
                text += "–î–∞–Ω—è: '–î–µ–ª–∞–π, —á—Ç–æ –≤–∑—è–ª —É–∂–µ!'";
            }
        } else if (action === "–¥–∞—Ç—å –±—É—Ö–ª–æ") {
            if (this.player.inventory.includes("–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'")) {
                this.player.inventory.splice(this.player.inventory.indexOf("–ø–æ–ª—É–ø—É—Å—Ç–∞—è –±—É—Ç—ã–ª–∫–∞ '–ë–∞–ª—Ç–∏–∫–∏'"), 1);
                this.player.reputation += 30;
                text += "–î–∞–Ω—è –≥–ª—É—à–∏—Ç '–ë–∞–ª—Ç–∏–∫—É': '–í —Ä–µ—Ö–∞–±–µ —è...' *–±–ª—é—ë—Ç*";
            } else {
                text += "'–ì–¥–µ –±—É—Ö–ª–æ, —Å—É–∫–∞?' ‚Äî –î–∞–Ω—è –∑–ª–∏—Ç—Å—è.";
            }
        } else if (action === "—É–π—Ç–∏") {
            text += "–î–∞–Ω—è —Å–≤–∞–ª–∏–ª.";
            this.danyaOptions.style.display = "none";
        }

        addOutput(text);
        this.updateGame();
    },

    checkQuestCompletion(foundItem) {
        if (foundItem === "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'" && "—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤" in this.player.quests) {
            this.completeQuest("—É–∫—Ä–∞—Å—Ç—å –∑–∞–Ω–∞—á–∫—É —Å–∫–∏–Ω—Ö–µ–¥–æ–≤");
        } else if (foundItem === "—á–µ–∫—É—à–∫–∞ '–ë–µ–ª–µ–Ω—å–∫–æ–π'" && "–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'" in this.player.quests) {
            this.completeQuest("–Ω–∞–π—Ç–∏ —á–µ–∫—É—à–∫—É '–ë–µ–ª–µ–Ω—å–∫–æ–π'");
        } else if (foundItem === "–±–∞–Ω–∫–∞ —Ç—É—à—ë–Ω–∫–∏" && "–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É" in this.player.quests) {
            this.completeQuest("–ø—Ä–∏–Ω–µ—Å—Ç–∏ –î–∞–Ω—å–µ —Ç—É—à—ë–Ω–∫—É");
        } else if (foundItem === "–±–∞–±—É—à–∫–∏–Ω —Å—É–ø" && "–ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å—É–ø" in this.player.quests) {
            this.completeQuest("–ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å—É–ø");
        } else if (foundItem === "—è—â–∏–∫ '–ñ–∏–≥—É–ª–µ–≤—Å–∫–æ–≥–æ'" && "–¥–∞—Ç—å '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ'" in this.player.quests) {
            this.completeQuest("–¥–∞—Ç—å '–ñ–∏–≥—É–ª—ë–≤—Å–∫–æ–µ'");
        }
    },

    completeQuest(quest) {
        const stories = {
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ —Ä–µ—Ö–∞–±": "‚Äî –í —Ä–µ—Ö–∞–±–µ –º–µ–¥—Å–µ—Å—Ç—Ä–∞ —Ç–∞–∫–∞—è: '–î–∞–Ω—è, —Ç—ã –≤ –¥–µ—Ä—å–º–µ!', –∞ —è: '–≠—Ç–æ –õ—ë—Ö–∞!'",
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –±–∞–±—É—à–∫–∞ —Å —Å—É–ø–æ–º": "‚Äî –ë–∞–±–∫–∞ –æ—Ä–∞–ª–∞: '–°–¥–æ—Ö–Ω–∏!', –∞ —Å—É–ø ‚Äî –∑–∞–µ–±–∏—Å—å, —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π...",
            "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ –ø–æ–±–µ–≥ –æ—Ç —Å–∫–∏–Ω—Ö–µ–¥–æ–≤": "‚Äî –ë–µ–∂–∞–ª, –∞ –æ–Ω–∏: '–°—Ç–æ–π, –∞–ª–∫–∞—à!' –Ø –≤—Å—Ç–∞–ª ‚Äî –ø–æ—Ö*–π."
        };
        let reward = this.player.quests[quest].reward;
        if (typeof reward === "string") {
            addOutput(`–î–∞–Ω—è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç: ${stories[reward]}`);
            this.player.reputation += 50;
        } else {
            Object.assign(this.player, reward);
            addOutput(`–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ: ${Object.entries(reward).map(([k, v]) => `${k}: ${v}`).join(", ")}`);
        }
        delete this.player.quests[quest];
        this.updateGame();
    },

    goTo(locationName) {
        this.currentLocation = this.locations.find(loc => loc.name === locationName);
        addOutput(`–í—ã –ø–æ—à–ª–∏ –≤ ${locationName}.`);
        this.updateWeatherAndTime();
        hideLocationPrompt();
        this.updateGame();
    }
};

function addOutput(text) {
    const output = document.getElementById('output');
    output.innerText += `\n${text}`;
    output.scrollTop = output.scrollHeight;
}

function showLocationPrompt() {
    const options = game.locations;
    const container = document.getElementById("location-options");
    container.innerHTML = '';
    options.forEach(loc => {
        const btn = document.createElement("button");
        btn.innerText = loc.name;
        btn.onclick = () => game.goTo(loc.name);
        container.appendChild(btn);
    });
    document.getElementById("location-prompt").style.display = "flex";
}

function hideLocationPrompt() {
    document.getElementById("location-prompt").style.display = "none";
}

function showUseItemPrompt() {
    const usableItems = game.player.inventory;
    const container = document.getElementById("item-options");
    container.innerHTML = '';
    usableItems.forEach(item => {
        const btn = document.createElement("button");
        btn.innerText = item;
        btn.onclick = () => game.useItem(item);
        container.appendChild(btn);
    });
    document.getElementById("item-prompt").style.display = "flex";
}

function hideItemPrompt() {
    document.getElementById("item-prompt").style.display = "none";
}

function showCombineItemsPrompt() {
    const items = game.player.inventory;
    const container = document.getElementById("combine-options");
    container.innerHTML = '';
    if (items.length < 2) {
        addOutput("–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏!");
        return;
    }
    let selected = [];
    items.forEach(item => {
        const btn = document.createElement("button");
        btn.innerText = item;
        btn.onclick = () => {
            if (!selected.includes(item)) {
                selected.push(item);
                btn.style.backgroundColor = "#0ff";
                if (selected.length === 2) {
                    game.combineItems(selected[0], selected[1]);
                    hideCombinePrompt();
                }
            }
        };
        container.appendChild(btn);
    });
    document.getElementById("combine-prompt").style.display = "flex";
}

function hideCombinePrompt() {
    document.getElementById("combine-prompt").style.display = "none";
}

function hideSearchMiniGame() {
    document.getElementById("search-mini-game").style.display = "none";
}

game.init();
